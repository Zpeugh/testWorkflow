/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'zpeugh' at '5/14/15 12:31 PM' with Gradle 2.4
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.4/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'groovy'

project.ext.set('javafxHome', System.env['JAVAFX_HOME'])

repositories{
  mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	compile 'org.codehaus.groovy:groovy-all:2.4.3'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    compile 'org.codehaus.groovyfx:groovyfx:0.4.0'
    compile("ant:ant:1.7.0")
    compile files("${javafxHome}/rt/lib/jfxrt.jar")
    compile 'org.codehaus.gpars:gpars:1.2.1'
}

String flowName

task wrap(type:Wrapper, description:"create a gradlew") {
    gradleVersion = '2.4'
}


task run( dependsOn: 'classes', type: JavaExec) {

    doFirst{
        main = 'flow.GUI'
        classpath = sourceSets.main.runtimeClasspath
    }
}
<<<<<<< HEAD
=======

// task exportWorkflow()  {
//
//     String homeDirectory = System.properties['user.home']
//     def folderString = homeDirectory + '/Desktop/ExportToGoogleDrive/'
//
//     doFirst{
//         FileTree googleDriveFolder = fileTree(new File(folderString))
//         delete googleDriveFolder
//     }
//
//     doLast{
//
//         FileTree resources = fileTree(dir: 'Resources')
//         FileTree actionImages = fileTree(dir: 'Resources/images')
//         FileTree formImages = fileTree(dir: 'Resources/formHtmls/images')
//
//         resources.exclude('.DS_Store')
//         resources.exclude('**/*.css')
//         resources.exclude('**/*.json')
//
//         resources = resources.minus(actionImages).getAsFileTree()
//         resources = resources.minus(formImages).getAsFileTree()
//
//         File arbitraryFile = file(resources[0])
//         String absolutePath = arbitraryFile.toString() - relativePath(arbitraryFile)
//
//         File exportsFolder = mkdir(folderString);
//         File resourcesFolder = mkdir(exportsFolder.toString() + '/Resources/');
//         File actionHtmlsFolder = mkdir(resourcesFolder.toString() + '/actionHtmls/');
//         File eventsFolder = mkdir(resourcesFolder.toString() + '/Events/');
//         File formHtmlsFolder = mkdir(resourcesFolder.toString() + '/formHtmls/');
//         mkdir(actionHtmlsFolder.toString() + '/actionPNGs/');
//         mkdir(formHtmlsFolder.toString() + '/formPNGs/');
//         mkdir(eventsFolder.toString() + '/texts/');
//         def fileString, noColonFileString, extension, myCopySpec
//         String baseName
//
//         resources.each{File file ->
//
//             fileString = file.toString()
//             extension = file.name.split('\\.')
//             baseName = file.name.replaceFirst(~/\.[^\.]+$/, '') + '.' + extension[-1]
//             noColonFileString = baseName.replaceAll(':', '[colon]')
//
//             myCopySpec = project.copySpec {
//                into folderString
//
//                copy{
//                    from fileString
//                    into folderString + (fileString - absolutePath) - baseName
//                    rename( baseName, noColonFileString )
//                }
//             }
//         }
//     }
// }
>>>>>>> a39a8ae2c635c680aee7121f81bfa015623947d0

task cleanResources() {

    doFirst{
        FileTree resources = fileTree(dir: 'Resources')
        FileTree images = fileTree(dir: 'Resources/images')

        resources.exclude('.DS_Store')
        resources.exclude('**/*.css')
        resources.exclude('**/*.json')
        resources.exclude('SpidaEmblem.png')
        resources.exclude('formHtmls/images')

        resources = resources.minus(images).getAsFileTree()

        delete resources
        delete 'actions/'
        delete 'conditions/'
    }
}
