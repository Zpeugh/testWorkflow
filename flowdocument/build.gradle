/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'zpeugh' at '5/14/15 12:31 PM' with Gradle 2.4
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.4/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java

apply plugin: 'groovy'

repositories{
  mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	compile 'org.codehaus.groovy:groovy-all:2.4.3'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

String flowName

task unzip(type: Exec) {

    doFirst{

        def dir = System.properties['user.home'] + '/Downloads/'
        flowName = System.console().readLine("\nFlow name: ")
        flowName = flowName.replace('.flow', '')
        def fileString = dir + flowName + '.flow'

        commandLine 'jar', 'xvf', fileString
    }
    doLast{

        def jsonFile = file('Flow.json')
        jsonFile.renameTo('Resources/' + flowName + '.json' )
    }
}

task runMain( dependsOn: 'classes', type: JavaExec) {

    doFirst{

        tasks.unzip.execute()
        tasks.cleanResources.execute()

        main = 'flow.WorkFlow'
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
        standardOutput = System.out

        def company = System.console().readLine("\nCompany name: ")

        def arguments = new ArrayList<>()
        arguments << company.replaceAll(' ', '~')
        arguments << flowName + '.json'

        args = arguments
    }

    doLast{
        tasks.showInBrowser.execute()
        tasks.exportWorkflow.execute()
    }
}

task exportWorkflow()  {


    String homeDirectory = System.properties['user.home']
    def folderString = homeDirectory + '/Desktop/ExportToGoogleDrive/'

    doFirst{

        FileTree googleDriveFolder = fileTree(new File(folderString))

        delete googleDriveFolder

    }

    doLast{

        FileTree resources = fileTree(dir: 'Resources')
        FileTree actionImages = fileTree(dir: 'Resources/actionHtmls/images')
        FileTree formImages = fileTree(dir: 'Resources/formHtmls/images')

        resources.exclude('.DS_Store')
        resources.exclude('**/*.css')
        resources.exclude('**/*.json')

        resources = resources.minus(actionImages).getAsFileTree()
        resources = resources.minus(formImages).getAsFileTree()

        File arbitraryFile = file(resources[0])
        String absolutePath = arbitraryFile.toString() - relativePath(arbitraryFile)

        File exportsFolder = mkdir(folderString);
        File resourcesFolder = mkdir(exportsFolder.toString() + '/Resources/');
        File actionHtmlsFolder = mkdir(resourcesFolder.toString() + '/actionHtmls/');
        File eventsFolder = mkdir(resourcesFolder.toString() + '/Events/');
        File formHtmlsFolder = mkdir(resourcesFolder.toString() + '/formHtmls/');
        mkdir(actionHtmlsFolder.toString() + '/actionPNGs/');
        mkdir(formHtmlsFolder.toString() + '/formPNGs/');
        mkdir(eventsFolder.toString() + '/texts/');
        def fileString
        def extension
        String baseName
        def myCopySpec


        resources.each{File file ->

            fileString = file.toString().replaceAll(':', '[colon]')
            file.renameTo(fileString);
            extension = file.name.split('\\.');
            extension = extension.last()
            baseName = file.name.replaceFirst(~/\.[^\.]+$/, '')
            baseName =  baseName + '.' + extension

            myCopySpec = project.copySpec {
               into folderString

               copy{
                   from fileString
                   into folderString + (fileString - absolutePath) - baseName
               }
            }
        }
    }
}


task cleanResources() {

    doFirst{
        FileTree resources = fileTree(dir: 'Resources')
        FileTree actionImages = fileTree(dir: 'Resources/actionHtmls/images')
        FileTree formImages = fileTree(dir: 'Resources/formHtmls/images')

        resources.exclude('.DS_Store')
        resources.exclude('**/*.css')
        resources.exclude('**/*.json')
        resources.exclude('SpidaEmblem.png')
        resources.exclude('projectmanager')

        resources = resources.minus(actionImages).getAsFileTree()
        resources = resources.minus(formImages).getAsFileTree()

        delete resources
        delete 'actions/'
        delete 'conditions/'
    }
}



task showInBrowser() {

    doLast{
        def thisDirectory = System.getProperty("user.dir")
        java.awt.Desktop.desktop.browse( ('File://' + thisDirectory + '/Resources/Events/eventIndex.html').toURI() )
    }

}
